My modification to hippie-expand

== Expansion like dabbrev-completion (hippie-completion) ==

The following is an approach for obtaining the complete list of possible expansions from hippie-expand, and letting the user select the one they want similar to dabbrev-completion.
It will generate a *Completions* buffer and list all completion. It use Emacs's internal completion interface.

<pre>

(defun hippie-expand-completions (&optional hippie-expand-function)
  "Return the full list of possible completions generated by `hippie-expand'.
    The optional argument can be generated with `make-hippie-expand-function'."
  (require 'cl)
  (let ((this-command 'hippie-expand-completions)
        (last-command last-command)
        (buffer-modified (buffer-modified-p))
        (hippie-expand-function (or hippie-expand-function 'hippie-expand)))
    (flet ((ding)) ; avoid the (ding) when hippie-expand exhausts its options.
          (while (progn
                   (funcall hippie-expand-function nil)
                   (setq last-command 'hippie-expand-completions)
                   (not (equal he-num -1)))))
    ;; Evaluating the completions modifies the buffer, however we will finish
    ;; up in the same state that we began.
    (set-buffer-modified-p buffer-modified)
    ;; Provide the options in the order in which they are normally generated.
    (delete he-search-string (reverse he-tried-table))))


(defun kk-completion (prompt lst &optional str)
  (let ((str (or str he-search-string)))
    (with-output-to-temp-buffer "*Completions*"
      (display-completion-list (all-completions "" lst) str))))

(defun kk-completion-autoresize (prompt lst &optional str)
  (let ((str (or str he-search-string)))
    (save-selected-window
      (with-output-to-temp-buffer "*Completions*"
        (display-completion-list (all-completions "" lst) str))
      (switch-to-completions)
      (fit-window-to-buffer))))

(defun hippie-completion (&optional hippie-expand-function)
  (interactive)
  (let ((options (hippie-expand-completions hippie-expand-function)))
    (kk-completion "Completion: " options)))

(fset 'hippie-expand-file (make-hippie-expand-function
                              '(try-complete-file-name-partially
                                try-complete-file-name)))
(fset 'hippie-expand-line (make-hippie-expand-function
                              '(try-expand-line
                                try-expand-line-all-buffers)))

(defun hippie-completion-file () (interactive) (hippie-completion 'hippie-expand-file))


(global-set-key (kbd "C-c h h") 'hippie-completion)
(global-set-key (kbd "C-c h f") 'hippie-completion-file)
;;(global-set-key (kbd "C-c h f") (lambda () (interactive) (hippie-completion 'hippie-expand-file)))

(global-set-key (kbd "M-v") 'switch-to-completions)
(define-key completion-list-mode-map (kbd "M-v") 'other-window)
;;(global-set-key (kbd "C-M-v") 'scroll-other-window)



;; ~/
;; kk

</pre>

use M-v to quickly switch to *Completions* buffer and select.

other useful keys:

use C-M-v to quickly scroll without switching to Completions buffer.

use M-v in the Completions buffer to return to original editing buffer.

use q in the Completions buffer to close and return to original editing buffer.



The following code will combine etags and dabbrev together with hippie-completion.

<pre>

(require 'etags)

(defun tags-complete-tag (string predicate what)
  (save-excursion
    ;; If we need to ask for the tag table, allow that.
    (if (eq what t)
	(all-completions string (tags-completion-table) predicate)
      (try-completion string (tags-completion-table) predicate))))

;(require 'cc-mode)

(defun he-tag-beg ()
  (let ((p (save-excursion
             (backward-word 1)
             (point))))
    p))

(defun try-expand-tag (old)
  (unless  old
    (he-init-string (he-tag-beg) (point))
    (setq he-expand-list (sort
                          (all-completions he-search-string 'tags-complete-tag) 'string-lessp)))
  (while (and he-expand-list
              (he-string-member (car he-expand-list) he-tried-table))
    (setq he-expand-list (cdr he-expand-list)))
  (if (null he-expand-list)
      (progn
        (when old (he-reset-string))
        ())
    (he-substitute-string (car he-expand-list))
    (setq he-expand-list (cdr he-expand-list))
    t))

(fset 'hippie-expand-tag (make-hippie-expand-function
                             '(try-expand-tag
                               try-expand-dabbrev
                               try-expand-dabbrev-all-buffers)))

(global-set-key (kbd "C-c h t") (lambda () (interactive) (hippie-completion 'hippie-expand-tag)))

</pre>

-- KiteDriver
