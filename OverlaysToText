EmacsOverlays and XEmacsExtents allow you to change the appearance of a buffer.
GlassesMode does this, for example. The result is this: The text in the buffer remains unchanged.
It just looks different. The confusing thing is that saving or copying the buffer will save or copy
the underlying text, not what is currently being displayed.

The following defun will allow you to turn the overlays into plain text, allowing you to save or copy it as you want.

[new]
Fix to read display attribute. -- [[rubikitch]]

== overlays-to-text ==

{{{
;;; Originally posted to #emacs by phf on 2007-10-24.

(defun overlays-to-text ()
  "Create a new buffer called *text* containing the visible text
of the current buffer, ie. it converts overlays containing text
into real text."
  (interactive)
  (let ((tb (get-buffer-create "*text*"))
        (s (point-min))
	(os (overlays-in (point-min) (point-max))))
    (with-current-buffer tb
      (erase-buffer))
    (setq os (sort os (lambda (o1 o2)
			(< (overlay-start o1)
			   (overlay-start o2)))))
    (mapc (lambda (o)
            (let ((bt (buffer-substring-no-properties s (overlay-start o)))
                  (b (overlay-get o 'before-string))
                  (text (or (overlay-get o 'display)
                            (buffer-substring-no-properties (overlay-start o) (overlay-end o))))
                  (a (overlay-get o 'after-string))
                  (inv (overlay-get o 'invisible)))
              (with-current-buffer tb
                (insert bt)
                (unless inv
                  (when b (insert b))
                  (insert text)
                  (when a (insert a))))
              (setq s (overlay-end o))))
          os)
    (let ((x (buffer-substring-no-properties s (point-max))))
      (with-current-buffer tb
        (insert x)))
    (pop-to-buffer tb)))
}}}


== copy-region-with-overlays ==


[new:AlexKost:2021-09-01 07:55 UTC]
The following command allows you to copy the selected text with
overlays.  It is a modification of the above code.  -- [[AlexKost]]

{{{
(defun copy-region-with-overlays (beg end)
  "Save the region as if killed, respecting the overlays.
This function is similar to `copy-region-as-kill' but it prefers
overlays over the underlying text."
  (interactive
   (if (region-active-p)
       (let ((m (mark))
             (p (point)))
         (list (min m p) (max m p)))
     (user-error "Please, select some text")))
  (let ((tmp-buf (generate-new-buffer " *tmp*"))
        (overlays (sort (overlays-in beg end)
                        (lambda (o1 o2)
			  (< (overlay-start o1)
			     (overlay-start o2)))))
	(pos beg))
    (mapc (lambda (ov)
            ;; Skip overlays for the selected region and `hl-line-mode'.
            (unless (memq (overlay-get ov 'face) '(region hl-line))
              (let* ((ov-beg (overlay-start ov))
                     (ov-end (overlay-end ov))
                     (buf-str (buffer-substring-no-properties pos ov-beg))
                     (ov-str (overlay-get ov 'display))
                     (ov-str (if (stringp ov-str)
                                 (substring-no-properties ov-str)
                               (buffer-substring-no-properties ov-beg ov-end)))
                     (ov-pre-str (overlay-get ov 'before-string))
                     (ov-post-str (overlay-get ov 'after-string)))
                (with-current-buffer tmp-buf
                  (insert buf-str)
                  (unless (overlay-get ov 'invisible)
                    (when ov-pre-str (insert ov-pre-str))
                    (insert ov-str)
                    (when ov-post-str (insert ov-post-str))))
                (setq pos ov-end))))
          overlays)
    (let ((rest (buffer-substring-no-properties pos end)))
      (with-current-buffer tmp-buf
        (insert rest)
        (copy-region-as-kill (point-min) (point-max))))
    (kill-buffer tmp-buf)
    (deactivate-mark)))
}}}

== extract-line-prefixes ==

Some modes (like tide-references) use line prefixes instead of overlays. Here's a version of the above to extract those:

{{{
(defun extract-line-prefixes ()
  "Create a new buffer called *text* containing the line prefixes of the current buffer."
  (interactive)
  (let ((tb (get-buffer-create "*text*")))
    (with-current-buffer tb
      (erase-buffer))
    (save-excursion
      (goto-char (point-min))
      (while (< (point) (point-max))
        (let* ((props (text-properties-at (point)))
               (prefix (plist-get props 'line-prefix)))
          (when prefix
            (with-current-buffer tb
              (insert prefix "\n"))))
        (forward-line 1)))
    (pop-to-buffer tb)))
}}}
