The Emacs ModeLine, HeaderLine, and FrameTitle all use a common convention called a ''mode line construct''.  The various variables (like `mode-line-format' and `frame-title-format') store mode line constructs, which are used to build the string that makes up the line/title.

The function `format-mode-line' renders a mode line construct into a simple string.  For example, the variable `icon-title-format' is passed to the function `format-mode-line', and the resulting string is given to the window system as the icon title.

Despite the name, these constructs and functions are not specific to the mode line only.  For use of mode line constructs in the actual mode-line, see ModeLineConfiguration.

== Composition ==

A mode line construct can be either a single string, a single Lisp symbol, or a list.  For lists, the first element in the list determines how the list is interpreted.  Nesting mode line constructs for recursive processing is very common.

=== Single string ===

A mode line construct can be a single string.  When rendered by `format-mode-line', this yields the same string, with any [PercentConstructs %-constructs] replaced with their values.

     (setq example-construct "buffer: %b")

Note that %-construct replacement in simple strings only happens at the top-level; see [[#NestedStrings]] below.

=== Single Lisp symbol ===

A mode line construct can be a single Lisp symbol.  When rendered, symbols are evaluated for their value.  The symbols `t' and `nil' are ignored, as are any symbols whose value is void.  A symbol whose value is a string is '''''not''''' subject to [PercentConstructs %-construct] replacement.

     (setq example-construct emacs-version)

=== List of constructs ===

A mode line construct can be a list of mode constructs.  Such a list must start with either a string, or another list.  When rendered, the list elements(s) are processed recursively as mode line constructs, and the results concatenated into one string.  Strings in such a list are subject to [PercentConstructs %-construct] processing.

     (setq example-construct (list "Emacs version: " emacs-version))

=== Field width ===

A list starting with an integer specifies a field width.  The remainder of the list is processed recursively, as above.  If the width is positive, the resulting string is space padded on the right to that width as needed.  If the width is negative, it is truncated as needed.

     ;; FIXME example for positive padded
     
     ;; limit path display to 70 characters 
     (setq example-construct (list -70 "File: %f"))

=== Eval form ==

A list starting with ##:eval## causes the rest of the list to be evaluated as a Lisp form, and uses the result as the string to display.

    FIXME need example

If the Lisp evaluation loads any files, it may cause infinite recursion and crash Emacs, so don't do that.

=== Propertize ===

A list starting with ##:propertize## will process the second list element as a mode line construct, taking the remaining elements as text properties to add to the resulting string.  (FIXME explain what this means in practice)

    FIXME need example

=== Conditional ===

A list starting with a symbol other than the above creates a conditional.  If the value of that first symbol is non-nil, the second element in the list is recursively processed as a mode line construct.  If the value is nil, the third element (if present) is so processed.

    ;; full file path if any, otherwise buffer name
    (setq example-construct (list buffer-file-name "%f" "%b"))
    
    ;; display the version control mode, if any is active
    ;; FIXME explain why is this needed, since nil values are usually ignored anyway
    (setq example construct (vc-mode vc-mode))

== Lisp usage ==

For the novice Lisp user, some common idioms and pitfalls are explained in the following.

=== Nested strings ===
[:NestedStrings]

If you want to change just one part of the mode-line, you likely will want to modify one of the many variables used to build `mode-line-format'.  For example, if you just want to change the position indicator, you might try this:

    (setq mode-line-position "(%l,%c)") ;; *** WRONG! ***

That will result in a literal #(%l,%c)# appearing in your mode-line.  The reason is that simple strings are only interpreted for [PercentConstructs %-constructs] when they occur in the top level mode line construct.  When `format-mode-line' processes `mode-line-format' recursively, `mode-line-position' is encountered as a '''''symbol'''''.  Symbols whose ''value'' is a string are ''not'' processed for %-constructs.  Instead use:

    (setq mode-line-position (list "(%l,%c)"))

Since string values occurring in lists ''are'' subject to %-construct processing, this yields the desired behavior.

=== Quoting Lisp symbols ===

Using Lisp symbols (variables) in mode line constructs can be tricky if you want the format to always reflect the current (changed) value of the symbol.  For example, the variable `mode-name' reflects the major mode of the current buffer.  Suppose we try something like this:

    (setq frame-title-format mode-name) ;; *** WRONG! ***

In the above, `mode-name' will be evaluated once, when the `setq' expression is evaluated.  Thus the frame title will be set to whatever mode Emacs was in at the time, and never change.  To get the desired behavior, we need to quote the Lisp symbol:

    (setq frame-title-format 'mode-name)

The leading single quote suppresses immediate evaluation, so that `setq' instead receives the symbol `mode-name', and not its current value.  (Analogous to a pointer or reference in some systems.)  Each time Emacs updates the frame title, it evaluates any Lisp symbols to get their value at that time.  End result, the frame title changes to reflect the current mode.

=== Backquoted lists ===

The FrameTitle page used to have something like this ([https://www.emacswiki.org/emacs?action=browse;id=FrameTitle;revision=48 rev 48]):

: Examples of Setting Frame and Icon Titles

    (setq frame-title-format '("" "%b @ Emacs " emacs-version))
    (setq frame-title-format '("" "[%b] - Emacs " emacs-version))
    (setq frame-title-format (list "%b - " (getenv "USERNAME") "@" (getenv "USERDOMAIN")))

: `list' is needed in the last example to flatten the sub-lists, otherwise a quote is sufficient.
: 
: Also see BackquoteSyntax â€“ LawrenceMitchell

However it is not clear to your current author (BenScott) why any of the lists/elements in question were being quoted in the first place, or why they were broken up into so many elements.  This would seem to work just as well:

    (setq frame-title-format (list "%b @ Emacs " emacs-version) )

== See also ==

* PercentConstruct
* ModeLineConfiguration
* ModeLine
* HeaderLine
* FrameTitle
* Emacs Lisp Reference Manual: [[Manual:Mode Line Data]]
