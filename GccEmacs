!GccEmacs refers to the ##feature/native-comp## branch of Emacs, which adds support for compiling EmacsLisp to native code using ##libgccjit##. All of the Elisp packages shipped with Emacs are native-compiled, providing a noticeable performance improvement out-of-the-box. Third-party packages are also compiled to achieve further performance improvements.

The official development log can be found on [http://akrl.sdf.org/gccemacs.html the gccemacs page].

The feature is discussed in detail in the paper [https://zenodo.org/record/3736363 "Bringing GNU Emacs to native code"] and related [https://www.youtube.com/watch?v=zKHYZOAc_bQ talk].

== Installation ==

=== From source ===

To build the native-comp branch of Emacs, you will need ##libgccjit## in addition to the other dependencies described in BuildingEmacs.

First, checkout the ##feature/native-comp## branch of Emacs, and configure it with the ##--with-nativecomp## flag:

    $ git clone git://git.savannah.gnu.org/emacs.git -b feature/native-comp
    $ cd emacs
    $ ./autogen.sh
    $ ./configure --with-nativecomp
    $ make -j$(nproc)

You should see //"Does Emacs have native lisp compiler? yes"// near the end of the configure output if native compilation has been enabled.

If you wish install conventionally with ##make install## otherwise run it from the build tree with ##./src/emacs##.

=== ArchLinux ===

An ##emacs-native-comp-git## package is available [https://aur.archlinux.org/packages/emacs-native-comp-git/ on the AUR].

Install it with your favourite AUR helper, or use the following commands to do it yourself:

    $ git clone https://aur.archlinux.org/emacs-native-comp-git.git
    $ cd emacs-native-comp-git
    $ makepkg --syncdeps --install

==== Daemon systemd service crashing on startup ====

If ##systemctl --user start emacs.service## immediately crashes and ##journalctl --user -u emacs## mentions a long path mentioning ##native-lisp## and ending with ##.eln##, add the following line to the ##[Service]## section in ##/usr/lib/systemd/user/emacs.service##:

    WorkingDirectory=/usr/lib/emacs/28.0.50/x86_64-pc-linux-gnu/

=== Guix ===

An ##emacs-native-comp## package is available [https://github.com/flatwhatson/guix-channel in this channel].

Add the channel to your ##~/.config/guix/channels.scm##, or use the following commands to install it as a one-off:

    $ git clone https://github.com/flatwhatson/guix-channel.git
    $ guix install --load-path=./guix-channel emacs-native-comp

=== Nix ===

An ##emacsGcc## package is available from the Nix community's [https://github.com/nix-community/emacs-overlay Emacs overlay].

Detailed installation instructions are available [https://gist.github.com/mjlbach/179cf58e1b6f5afcb9a99d4aaf54f549 in this Gist].

=== Docker ===

An ##emacs-nativecomp## docker image is [https://hub.docker.com/r/andreacorallo/emacs-nativecomp available]. Also examine the gitlab repo for the [https://gitlab.com/koral/emacs-nativecomp-dockerfile dockerfile].

== Usage ==

By default Emacs ships only native compiling the files included in the Emacs image.

The native compilation of the remaining Emacs distribution and external packages happen automatically and asynchronously (See Deferred compilation).

=== Deferred compilation ===

Deferred compilation refers to //"just-in-time"// native compilation of Elisp.  When a byte-compiled Elisp module is loaded, it gets queued for native compilation.  Once native compilation has finished, the native-compiled definitions automatically replace the byte-compiled versions.

This is simple to use as does not require any user intervention.  You may prefer an //"ahead-of-time"// solution described further below.

Deferred compilation is **enabled by default** and controlled by the ##comp-deferred-compilation## customize.

=== Ahead-of-time compilation ===

==== Emacs distribution ====

Is possible to native compile ahead-of-time all the Emacs distribution using the ##NATIVE_FULL_AOT##, ex:

    $ make NATIVE_FULL_AOT=1 -j$(nproc)

==== External packages ====

The simplest solution for //"ahead-of-time"// compilation is to use a package manager which supports it:

* **package.el**: The built-in package manager currently does **not** support ahead-of-time native compilation (files will still be native compiled but on demand by deferred compilation).
* **straight.el**: The [https://github.com/raxod502/straight.el straight.el] package manager native-compiles packages by default.

Otherwise, you'll need to manually native-compile your packages:

    ;; native-compile all Elisp files under a directory
    (native-compile-async "/path/to/packages" 'recursively)

This will add all Elisp files under that directory to the queue for asynchronous native compilation.

If you're running native compilation from a script, you'll need to block the Emacs process until the async jobs have completed:

    ;; block until native compilation has finished
    (while (or comp-files-queue
               (> (comp-async-runnings) 0))
      (sleep-for 1))
