When running Emacs inside of xterm (e.g. with <code>emacs -nw</code>), it is possible to mostly mimic the behavior of frame/icon titles.  To do so, you will need a copy of
[http://www.splode.com/~friedman/software/emacs-lisp/src/xterm-title.el xterm-title.el],
[http://www.splode.com/~friedman/software/emacs-lisp/src/xterm-frobs.el xterm-frobs.el],
and the following snippet for your <code>.emacs</code>:

    (when (and (not window-system)
               (string-match "^xterm" (getenv "TERM")))
      (require 'xterm-title)
      (xterm-title-mode 1))

Then modify the frame/icon frame title variables as you would in a window system.


By [[avar]]:

My Emacs insists that I have a "dumb" terminal. Even under xterm. This works for me:

  (when (and
         (not window-system)
         (or
          (string= (getenv "TERM") "dumb")
          (string-match "^xterm" (getenv "TERM"))))
    (require 'xterm-title)
    (xterm-title-mode 1))

[new]
By PaulGoins:

My Emacs (emacs-snapshot on Ubuntu, version 1:20090730-1~intrepid1) says TERM is "dumb" after fully loading, but while loading .emacs it does show the right thing (rxvt-unicode, in my case).  "Your mileage may vary", I suppose.

(Note: xterm-title-mode does not seem to work with urxvt.  It does work fine with other xterm-compatibles like gnome-terminal.)

[new]
By wisnij:

I wasn't able to get xterm-title working with my Cygwin xterm for some reason.  As a stopgap, using xterm-frobs directly seems to work well enough:

  (if (and (not window-system)
           (string-match "^xterm" (getenv "TERM")))
      (progn
        (require 'xterm-frobs)
        (defun my-xterm-title-hook ()
          (xterm-set-window-title
           (concat
            (cond (buffer-read-only "%  ")
                  ((buffer-modified-p) "*  "))
            (buffer-name)
            "  (" invocation-name "@" system-name ")")))
        (add-hook 'post-command-hook  'my-xterm-title-hook))
      (setq frame-title-format
            '(""
              (:eval (cond (buffer-read-only "%%  ")
                           ((buffer-modified-p) "*  ")))
              "%b  (" invocation-name "@" system-name ")")))


[new]
By CraigMcDaniel:

As an alternative to using xterm-title.el/xterm-frobs.el, send your own escape codes to the terminal. I'm running iTerm2 so this example sets the window title to the full file name and the tab title to the shorter buffer name:

  (defun xterm-title-update ()
    (interactive)
    (send-string-to-terminal (concat "\033]1; " (buffer-name) "\007"))
    (if buffer-file-name
        (send-string-to-terminal (concat "\033]2; " (buffer-file-name) "\007"))
        (send-string-to-terminal (concat "\033]2; " (buffer-name) "\007"))))
   
  (add-hook 'post-command-hook 'xterm-title-update)

[new]
By mcandre:

If you already show directories in the buffer name, you may want to use a simpler format:

  (setq uniquify-buffer-name-style 'post-forward
             uniquify-min-dir-content 7))
  
  (setq frame-title-format '("%b"))

For ncurses / CLI title setting, xterm-title doesn't seem to work for me in Terminal.app (Mac OS X). So I just use xterm-frobs directly:

  (require 'xterm-frobs)
  (defun my-xterm-title-hook ()
        (xterm-set-window-title (buffer-name)))
  (add-hook 'post-command-hook  'my-xterm-title-hook)
