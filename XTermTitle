When running Emacs inside of xterm (e.g., ##emacs -nw##, or via SSH), it is possible to mostly mimic the behavior of a GUI FrameTitle.

== Noah Friedman implementation ==

Noah Friedman provides ##xterm-frobs.el## and ##xterm-title.el##, which were the standard for many years.

As of 2022, they have not been updated since 2016, and do not appear to work with modern Emacs (version 27.1 circa 2020).  Failure mode is an apparent input hang when attempting to invoke ##xterm-title-mode##, recoverable with <kbd>C-g</kbd>, but still no title updates.

It is also reported that ##xterm-title-mode## does not work with ##urxvt##, even when other xterm-compatibles do work on the same system.

In any event, to use Mr Friedman's implementation, install these Lisp files:

* http://www.splode.com/~friedman/software/emacs-lisp/src/xterm-title.el
* http://www.splode.com/~friedman/software/emacs-lisp/src/xterm-frobs.el

Place the following in your InitFile:

    (when (and (not window-system)
               (string-match "^xterm" (getenv "TERM")))
      (require 'xterm-title)
      (xterm-title-mode 1))

Then modify the frame/icon frame title variables as you would in a window system (see FrameTitle for details on that).

=== Cygwin ===

By wisnij:

I wasn't able to get xterm-title working with my Cygwin xterm for some reason.  As a stopgap, using xterm-frobs directly seems to work well enough:

  (if (and (not window-system)
           (string-match "^xterm" (getenv "TERM")))
      (progn
        (require 'xterm-frobs)
        (defun my-xterm-title-hook ()
          (xterm-set-window-title
           (concat
            (cond (buffer-read-only "%  ")
                  ((buffer-modified-p) "*  "))
            (buffer-name)
            "  (" invocation-name "@" system-name ")")))
        (add-hook 'post-command-hook  'my-xterm-title-hook))
      (setq frame-title-format
            '(""
              (:eval (cond (buffer-read-only "%%  ")
                           ((buffer-modified-p) "*  ")))
              "%b  (" invocation-name "@" system-name ")")))


=== Terminal.app ===

For ncurses / CLI title setting, xterm-title doesn't seem to work for me in Terminal.app (Mac OS X). So I just use xterm-frobs directly:

  (require 'xterm-frobs)
  (defun my-xterm-title-hook ()
        (xterm-set-window-title (buffer-name)))
  (add-hook 'post-command-hook  'my-xterm-title-hook)

== Roll your own ==

By CraigMcDaniel:

As an alternative to using external libraries, send your own escape codes to the terminal. I'm running iTerm2 so this example sets the window title to the full file name and the tab title to the shorter buffer name:

  (defun xterm-title-update ()
    (interactive)
    (send-string-to-terminal (concat "\033]1; " (buffer-name) "\007"))
    (if buffer-file-name
        (send-string-to-terminal (concat "\033]2; " (buffer-file-name) "\007"))
        (send-string-to-terminal (concat "\033]2; " (buffer-name) "\007"))))
   
  (add-hook 'post-command-hook 'xterm-title-update)

== Improperly dumb terminals ==

Sometimes Emacs insists that you have a "dumb" terminal.  One can tell Emacs to treat all such terminals as xterm:

  (when (and
         (not window-system)
         (or
          (string= (getenv "TERM") "dumb")
          (string-match "^xterm" (getenv "TERM"))))
    ;; do xterm stuff here
    )

Another approach would be to try to detect xterm via more than one possible variable:

    (when (and (not (display-graphic-p))
	   (or
	    (string-match "^xterm" (getenv "TERM"))
	    (getenv "XTERM_VERSION")))
        ;; do xterm stuff here
	)


Note that ##TERM## may have the correct value while loading the InitFile, but change to ##dumb## after Emacs finishes loading.
