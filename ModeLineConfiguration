[[de:indonesia]]
The Emacs ModeLine is configurable, offering special modes and functions that change its functionality. The mode-line is [[buffer]]-specific, so the same buffer has the same mode-line in different windows.

Similar to the mode-line are the HeaderLine (at the top of a [[window]]) and the FrameTitle (the title of a [[frame]]).







== Standard Minor Modes ==

Display of some information in the mode line is governed by these standard minor modes.  Repeat a command to toggle on and off as needed, or place in your InitFile to turn it on by default.

* `display-time-mode' -- Display the current time -- DisplayTime
* `line-number-mode' -- Display the current line number.  See also LineNumbers
* `column-number-mode' -- Display the current column number
* `size-indication-mode' -- Show the current buffer size.  See Manual:size-indication-mode
* `display-battery-mode' -- Show laptop battery information -- DisplayBatteryMode.






== Customize UI ==

There is an interactive [[CustomizingAndSaving|Customization]] group for the mode line.  In the standard menus, find *Options* -> *Customize Emacs* -> *Top-level Customization Group*, then navigate to *Environment* -> *Mode Line*.







== Mode-Line Enhancements ==

* HideModeLine -- Save screen real estate by hiding the mode line.
* LunarModeLine -- Display current lunar phase in the modeline.
* ModeLineDirtrack -- show the buffer's current directory in the mode-line.
* ModeLineMinorModeMenu -- Pop up minor-mode menus from the mode-line.
* ModeLinePosAtBeginning -- Display line and column numbers at the start of the mode line, so they are visible even when the TextCursor is inside a function with a long name.
* ModeLineRegion -- Display size of active [[region]] in the mode-ilne, in various ways.  
* [https://github.com/seagle0128/doom-modeline Mode-line from Doom emacs]
* [https://github.com/TheBB/spaceline Mode-line from Spacemacs]
* NyanMode -- Indicate your position in the buffer in the mode line, with a little help from [WikiPedia:Nyan_Cat Nyan Cat].
* OcticonsModeLine -- Nice icons in the mode line thanks to the [https://github.com/rougier/emacs-octicons octicons] font.
* PowerLine -- How to make VIM-like [https://github.com/Lokaltog/vim-powerline powerline].
* ShowPointMode -- Show value of point in the mode-line.
* SmartModeLine -- Smart, sexy, and space efficient mode line. [https://github.com/Bruce-Connor/smart-mode-line/]
* SmlModeLine -- Indicate in the mode-line, in a scrollbar-like way, the portion of the buffer that is visible in the window.
* [[wcMode]] -- Show character/word/line count in mode-line






== Manual Customization ==

Customize the mode line by altering variable `mode-line-format', or its components.  

See also [[Manual:Mode Line Format]] in the Emacs Lisp Reference Manual.




=== Syntax ===

Each mode-line variable is made up of:

* '''string''' -- A string appears verbatim, except for %-constructs embedded in the string
* '''symbol''' -- A Lisp symbol is evaluated for its value.  The symbols `t` and `nil' are ignored, as are any symbols whose value is void.
* '''lists''' -- A list whose first element is a string (##(string rest...)##) or list ##(list rest...)##) means to process all the elements recursively and concatenate the results.





=== Mode Line Components ===

The default mode-line has several components, each a variable you can modify.  You can customize one part of the mode-line, while leaving the rest alone.

The default `mode-line-format' is:

    (%e mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification mode-line-position (vc-mode vc-mode) mode-line-modes mode-line-misc-info mode-line-end-spaces)

Broken down, that is:

|| Item   || Meaning ||
|| ##%e## || Out-of-memory error message, or nothing ||
|| ##mode-line-front-space## || Dash (##-##) for text terminals, a space (## ##) for graphic displays ||
|| ##mode-line-mule-info## || Information on character sets, encodings, and other human-language details ||
|| ##mode-line-client## || Identifies frames created by ##emacsclient## ||
|| ##mode-line-modified## || Modified and read-only status ||
|| ##mode-line-remote## || At-sign (##@##) for buffers visiting remote files, otherwise a dash ||
|| ##mode-line-frame-identification## || Frame title, for some platforms ||
|| ##mode-line-buffer-identification## || Buffer/file name, or other details for non-file buffers ||
|| ##mode-line-position## || Line, column, and portion (percent) of [[point]] in buffer, and total size of buffer ||
|| ##(vc-mode vc-mode)## || FIXME ??? ||
|| ##mode-line-modes## || Major and minor modes, in parenthesis, plus square brackets for recursive edits ||
|| ##mode-line-misc-info## || Defun name for `which-function-mode', clock for `display-time-mode'
|| ##mode-line-end-spaces## || A line of dashes for text terminals; nothing for graphics displays ||





=== Percent Sign Constructs ==

The heart of the mode-line implementation are what the manual calls ''%-constructs'' -- a percent sign (##%##) followed by a single character.  Each occurrence of such a construct in a mode-line string is replaced with useful information.  The %-constructs are listed below.

Several of them use the technique of evaluating to some kind of status indicator if a given condition is in effect, or if not in effect evaluating as an empty string or other placeholder.  This lets the mode-line accumulate status fields that appear as applicable.

|| Symbol || Replacement value ||
|| ##%b## || buffer name ||
|| ##%f## || file name, with path ||
|| ##%F## || frame name ||
|| ##%s## || process status, or ##no process## ||
|| ##%l## || line number ||
|| ##%n## || ##Narrow## if the window is narrowed, otherwise nothing ||
|| ##%t## || text/binary file mode, for platforms that make that distinction (like Microsoft Windows)  ||
|| ##%z## || coding systems in effect for keyboard, terminal, and file/buffer ||
|| ##%Z## || same as ##%z## plus end-of-line format ||
|| ##%*## || buffer status - ##%## if read-only, otherwise ##*## if modified, otherwise ##-## ||
|| ##%+## || buffer status - ##*## if modified, otherwise ##%## if read-only, otherwise ##-## ||
|| ##%&## || buffer status - ##*## if modified, otherwise ##-## ||
|| ##%@## || default-directory status - ##@## if remote, ##-## if local ||
|| ##%[## || recursive editing level, one ##[## for each level deep ||
|| ##%]## || recursive editing level, one ##]## for each level deep ||
|| ##%c## || column number, first column is zero ||
|| ##%C## || column number, first column is one ||
|| ##%i## || buffer size, in bytes ||
|| ##%I## || buffer size, auto-scaled to K/M/G ||
|| ##%p## || percent of buffer above top of window ||
|| ##%P## || percent buffer above bottom of window ||
|| ##%e## || out-of-memory error message, if any ||
|| ##%%## || literal ##%## ||
|| ##%-## || "infinitely many dashes" ||

The combination of ##%*## and ##%+## achieve the four-way ##--##, ##%%##, ##**##, ##%*## buffer status indicator.





=== Example ===

The mode-line normally looks something like this:

    -u:**-F1  *scratch*   All L12    (Lisp Interaction)-------%-

As an example, to make it like this:

    Lisp Interaction: buffer *scratch*, line 5 -- user: alice

you might use this:

    (setq mode-line-format
          (list
           ;; value of `mode-name'
           "%m: "
           ;; value of current buffer name
           "buffer %b, "
           ;; value of current line number
           "line %l "
           "-- user: "
           ;; value of user
           (getenv "USER")))

----
CategoryDisplay
CategoryEditing
CategoryWindows
CategoryModeLine
