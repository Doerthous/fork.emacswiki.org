[[ELPA]] packages come in two forms. The first is a relatively simple
single file package, while the second is a more complicated multi-file
format. Most of this page discusses the multi-file format because it
causes the most problems.


== Singlefile packages ==

These are very simple: a package consists of a single EmacsLisp file with a header that
follows a standard markup. This is almost exactly as you would get with AutoInsertMode:

{{{
;;; test.el --- a simple package                     -*- lexical-binding: t; -*-

;; Copyright (C) 2014  Nic Ferrier

;; Author: Nic Ferrier <nferrier@ferrier.me.uk>
;; Keywords: lisp
;; Version: 0.0.1

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Put a description of the package here

;;; Code:

;; code goes here

(provide 'test)
;;; test.el ends here
}}}

Things that people tend to forget or not notice about this:

* significant comments start with `;;;` - 3 semicolons, not 2
* there *must* be a Version header, unless you're only supporting [[MELPA]]
* the Commentary section should be present
* the `;;; Code:` marker is important, it shows the end of the Commentary
* the end marker *must* be present

One more note, the LexicalBinding declaration is optional. Although
these days you should consider it a default.

== Multifile packages ==

[[ELPA]] multifile packages have a complex structure built on tar files.
In other words, not every tar file works as a package; only tar files that
follow certain conventions, as described here or in the emacs manual 
"(elisp) Multi-file Packages". 


=== When do you need to build a multifile package? ===

Emacs requires that you build tar file packages if you want to install
them from the file system with:

{{{
M-x package-install-file
}}}

for example.

If you are submitting to a package archive, you may not need to build the 
package yourself:
* MELPA builds packages for you, with its own build system. You don't
build packages with MELPA.
* ELPA requires you to have the directory structure here checked into
the ELPA git repository. You don't build the actual tar file.


=== An example package ===

Let's imagine you have a package `alchemist`, basically you need to
create a directory that looks like this:

{{{
alchemist-0.0.2/alchemist-buffer.el
alchemist-0.0.2/alchemist-compile.el
alchemist-0.0.2/alchemist-execute.el
alchemist-0.0.2/alchemist-hooks.el
alchemist-0.0.2/alchemist-mix.el
alchemist-0.0.2/alchemist-utils.el
alchemist-0.0.2/alchemist.el
alchemist-0.0.2/alchemist-pkg.el
}}}

and then tar that.

The pkg file, `alchemist-pkg.el`, must look like this:

{{{
(define-package
    "alchemist"
    "0.0.2"
  "A package to help with alchemy.")
}}}

In other words: package name, version, summary. All strings.


[[Marmalade Repo]] has a
[[https://github.com/nicferrier/elmarmalade/tree/master/demo-multifile demo multifile package]]
with a Makefile that shows how you can build
a package with simple unix tools, do it but also tools like Cask and
ELPAKit will help you build packages as well.


=== Cask ===

You can use [[http://cask.github.io/why-cask.html cask package]] and
it does the right thing:

* create a directory called dist
* with the alchemist-[VERSION].tar in it
* inclusive a alchemist-pkg.el file.

Then you can install or upload somewhere.


=== ELPAKit ===

(*Note:* Development on ELPAKit seems to be stalled since late 2014)

[[https://github.com/nicferrier/elpakit ELPAKit]] does the right
thing too. With no python:

{{{
M-x elpakit-make-multi
}}}

in the package directory of a multi-file package.

----
CategoryCode CategoryPackaging
