A [[frame]] contains and displays one or more Emacs internal [[window]]s.

Many other programs and people would call an Emacs frame a "window", and the Emacs internal windows would be called "panes".

When running on a GUI (graphical user interface, such as X11, Microsoft Windows, or !MacOS X), each external window provided by the host GUI becomes an Emacs frame.  In a character cell terminal (like a text console or an xterm), there is an implicit Emacs frame for the terminal.

Frames can have names, similar to how buffers have names.  Additionally, on GUIs, there is a ''frame title'', typically shown by the host GUI in a "title bar" above the Emacs frame.  There is also a separate ''icon title'', for iconified/minimized representations of Emacs frames.

To have the Emacs frame title appear in the title bar of a character terminal, see XTermTitle.

== Standard behavior ==

The frame title is determined by the variable `frame-title-format'.  Likewise, the icon title comes from`icon-title-format'.  They both behave like the `mode-line-format' variable: A string, Lisp symbol, and/or recursively-interpreted list of same, concatenated together, with ##%## (percent sign) being interpreted specially in any strings.  Two of the most common are ##%f## for the full file path, and the ##%b## for the buffer name.  See ModeLineConfiguration for details.

The default `frame-title-format' (as of Emacs 27.1, circa 2020) is:

    (multiple-frames "%b" ("" invocation-name "@" system-name))

In effect, if there are multiple Emacs frames (multiple external GUI windows), the buffer name is used as the frame title; otherwise, something like ##Emacs@hostname## is used.

Note that ##%## constructs which indicate line or column number of point (##%l##, ##%c##, ##%C##) are ignored in frame and icon title formats.

== Renaming frames ==

Library <tt>[[frame-cmds.el]]</tt> contains two commands for renaming [[frame]]s:

* '''`rename-frame'''' - Rename a frame named ##OLD-NAME## to ##NEW-NAME##.
: Prefix arg ##ALL-NAMED## non-`nil' means rename all frames named ##FRAME## to ##NEWNAME##.
: ##OLD-NAME## can be a frame, its name, or `nil'.  Default is `selected-frame'.
: ##NEW-NAME## is a string or `nil'.  Default ##NEW-NAME## is current `buffer-name'.

* '''`rename-non-minibuffer-frame'''' - Unless ##OLD-NAME## names the `minibuffer-frame', use `rename-frame'
to rename a frame named ##OLD-NAME## to ##NEW-NAME##.
: Prefix arg ##ALL-NAMED## non-`nil' means rename all frames named ##FRAME## to ##NEWNAME##.
: ##OLD-NAME## can be a frame, its name, or `nil'.  Default is `selected-frame'.
: ##NEW-NAME## is a string or `nil'.  Default ##NEW-NAME## is current `buffer-name'.

== Example customizations ==

These would generally be placed in one's InitFile, to take effect for every Emacs session.  However, you can also use them in LispInteractionMode.  This may be useful to test and tune to your liking, before you save the finished result.

=== Static text ===

The simplest possible frame title would likely be some text which never changes -- always the same, regardless of frame, buffer, window, or anything else.

    (setq frame-title-format "Hello world")

=== Simple format string ===

Moving up one step in complexity would be a simple string that makes use of ##%## constructs.  This shows the buffer name first, followed by the full file path (if any) in angle brackets:

    (setq frame-title-format "%b <%f>")

See ModeLineConfiguration for the possible percent-sign constructs.

=== User and host ===

A popular desire is to put some variation on ##user@host## in the frame title.

==== Lisp symbols ====

This method uses Emacs Lisp symbols, rather than host OS environment strings, to obtain username and hostname.  This may, in theory, be more portable across different OSes.  To provide just the user and host:

    (setq frame-title-format (list user-login-name "@" system-name))

One can combine this with % constructs.  For example, this puts the buffer name first, with the user and host following in parenthesis:

    (setq frame-title-format (list "%b (" user-login-name "@" system-name ")"))

That might render as:

    *scratch* (jsmith@darkstar)

==== Environment variables ====

A perhaps more common but less portable approach is to query the host OS environment variables directly.

==== Microsoft Windows ====

Windows 

    (setq frame-title-format (list "%b - " (getenv "USERNAME") "@" (getenv "USERDOMAIN")))

In the above, `list' is needed to flatten the sub-lists, otherwise a quote is sufficient.  See also BackquoteSyntax.

==== SuSE ====

This reportedly worked well on SuSE Linux:

    (setq frame-title-format (list "%f - " (getenv "USER") "@" (getenv "HOSTNAME")))


==== FIXME ====

This example 

Another example to use in an [[init file]], used on e.g. Ubuntu where USERDOMAIN doesn't exist, and the environment variable HOSTNAME isn't exported by default (as can be seen by running "export -p" at a login shell), and we want to get the host name by running the POSIX 'hostname(1)' command only once, at startup. 

    (setq my-hostname 
      (replace-regexp-in-string "\\(^[[:space:]\n]*\\|[[:space:]\n]*$\\)" "" ;; like perl chomp()
        (with-output-to-string 
           (call-process "/bin/hostname" nil standard-output nil))))
    (setq my-username (getenv "USERNAME"))
    (setq frame-title-format '("%b - " my-username "@" my-hostname))


=== Buffer name and Emacs version ===

Here are two similar examples, both of which display the buffer name and Emacs version.

    (setq frame-title-format '("" "%b @ Emacs " emacs-version))
    (setq frame-title-format '("" "[%b] - Emacs " emacs-version))

They would render something like:

    *scratch* @ Emacs 27.1
    [*scratch*] @ Emacs 27.1

=== ErcChannelTracking ===

If you're an ErcChannelTracking fan, take a look at:

    (setq frame-title-format '("" erc-modified-channels-object "%b @ Emacs " emacs-version))

=== Frame and icon ===

To set both frame and icon title to the same thing, which also tells if you are using GnuEmacs or [[XEmacs]]:

    (setq frame-title-format
          (setq icon-title-format
                (format "%%b - %semacs" (if (featurep 'xemacs) "x" ""))))

=== Date and time ===

Display date/time if `display-time-mode' is set:

    (setq frame-title-format '("" invocation-name "@" system-name "     "
      global-mode-string "     %f" ))

See also `display-time-format' and `mode-line-format'.

=== Directory, file, or buffer name ===

Full directory path name for DirEd, full file path name for files, buffer name otherwise.

    (setq frame-title-format
          '(buffer-file-name "%f"
            (dired-directory dired-directory "%b")))


=== Mark modified buffer ===

This puts a bullet point (•) after the buffer name, if there are unsaved changes.

  (setq frame-title-format
    '((:eval (if (buffer-file-name)
                  (abbreviate-file-name (buffer-file-name))
                    "%b"))
      (:eval (if (buffer-modified-p) 
                 " •"))
      " - Emacs")
  )

----
CategoryFrames CategoryDisplay FrameModes
