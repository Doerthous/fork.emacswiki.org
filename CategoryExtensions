Extensions (using the category name from `finder-by-keyword'), are utility libraries intended to be used by programmers writing Emacs Lisp.

**These extension libraries offer no (or little) user-facing functionality.**

== Comprehensive Utility Frameworks ==

* APortableEmacsLibrary (APEL)
* [[mon-utils.el]]

== Data Structures and Types ==

* ArrayExtension -- Support for arrays, and matrixes.
* [[AVLtrees]] -- AVL tree data structures (self-balancing binary trees)
* DictionaryTrees -- Advanced dictionary data structures
* [[Heaps]] -- Heap data structures (a.k.a. priority queues)
* [[Queues]] -- Queue data structures
* RecordType -- Definition of a new type: record. A record is a set of named fields with their associated type.
* TernarySearchTrees -- ternary search tree data structures (obsolete - use [[Tries]] instead)
* [[Tries]] -- General trie data structures (including ternary search trees)
* [http://github.com/nicferrier/emacs-kv kv.el] -- key/value data structure functions
* [http://github.com/VincentToups/emacs-utils/blob/master/ra-lists.el ra-lists.el] -- Random-Access Pairs and Lists

== Algorithms ==

* TaggedNFA -- Tagged non-deterministic finite state automata (generally used for regular expression matching algorithms)

== Strings ==

* StringUtils -- String-manipulation utilities
* [[strings.el]] -- Miscellaneous string functions
* [https://github.com/magnars/s.el s.el] -- String manipulation functions
* UcsUtils -- Utilities for Unicode characters, strings, and vectors
* [[ucs-cmds.el]] -- Functions to define commands that insert Unicode chars

== Numbers and Mathematics ==

* [http://www.astro.princeton.edu/~rhl/skyserver/bigint.el bigint.el] -- A simple bigint package for Emacs. (But Emacs 27 will provide builtin big integers.)
* [[Infix]]    -- Writing infix math expressions

== Sequences ==

* ListUtils -- List-manipulation utility functions
* [http://www.splode.com/~friedman/software/emacs-lisp/src/list-fns.el list-fns.el] -- List searching and manipulation functions
* [https://github.com/magnars/dash.el dash.el] -- List api that does not require ##cl.el##.
* VectorUtils -- Vector-manipulation functions
* [http://www.splode.com/~friedman/software/emacs-lisp/src/obarray-fns.el obarray-fns.el] -- obarray-manipulating functions

== Macros ==

* MacroUtilities -- Utilities for writing macros.
* SetupEl -- A macro to ease repetitive configuration patterns in EmacsLisp.

== New Language Constructs ==

* [http://www.mahalito.net/~harley/elisp/nlet.el nlet.el] -- Scheme's named let
* [http://github.com/skeeto/elisp-fakespace fakespace.el] -- Fake namespaces with `defpackage'
* [http://github.com/skeeto/emacs-memoize memoize.el] -- Memoize functions
* [[Anaphora]] -- Anaphoric macros that provide implicit temp variables
* [http://github.com/funkenblatt/combinators.el combinators.el] -- Function combining functions (currying etc.)

== Looping ==

* [[Iterate]] -- Translation of Common Lisp `iterate' macros into EmacsLisp

== Concurrency ==

* LaterDo -- Calling functions later, to fake threading
* AsyncEval -- Evaluate forms in a different Emacs process
* CoRoutines -- Coroutines for EmacsLisp
* [http://github.com/jwiegley/emacs-async async.el] -- Asynchronous processing

See also ConcurrentEmacs

== Parsers and Lexers ==

See CategoryData

== Text Processing ==

* [http://github.com/yuutayamada/stem stem.el] -- Functions that stem English words

== Buffer Text ==

* ThingAtPoint -- Functions to return various kinds of EmacsLisp entity (e.g. a [[symbol]]) at or near point

== User Interface ==

* IncrementalRead -- Build libraries that act incrementally on input
* LuiMode -- A Line-oriented user interface
* GIT:emacs-lisp/tabulated-list.el -- Display and interact with tables
* ButtonLockMode -- Clickable text defined by a [[regexp]]
* [[Express]] -- Alternatives to `message'
* NavFlash -- Briefly highlight the current line
* UnicodeEnbox -- Surround a string with box-drawing characters
* AutoOverlays -- Define overlays by regexps -- automatically updated or destroyed as buffer is modified

== Key Bindings ==

* NaKeD -- Allow naked key descriptions: no angle brackets (##<##...##>##)
* DoReMi -- Incremental change using arrow keys or mouse wheel
* UseCustomizeForKeyBindings -- Widget and `defcustom' code to use Customize for key bindings
* [[http://github.com/tarsius/keymap-utils keymap-utils]] -- Keymap utilities

== Menus ==

* EasyMenu -- Write menu definitions that work under GnuEmacs and XEmacs 

== Windows ==

* WindowEndVisible --  Find the last visible point in a window
* [https://github.com/kiwanami/emacs-window-layout window-layout.el] -- Window layout manager

== Frames ==

* Lisp:frame-cmds.el -- Frame and window commands
* Lisp:frame-fns.el -- Non-interactive frame and window functions
* FontUtils -- Utility functions for working with fonts

== Buffers ==

* BufferUtils -- Buffer-manipulation functions

== Modes ==

* GIT:emacs-lisp/easy-mmode.el -- Define major and minor modes
* ModeLocal -- Cause a variable or function to have a local value for a major mode.

== Networking ==

* TcpClient -- Network interface to help create network-related scripts
* [[Websocket]] -- Emacs <nowiki>WebSocket</nowiki> client and server
* [[Elnode]] -- Async HTTP server
* [ftp://ftp.newartisans.com/pub/emacs/httpd.el httpd.el] -- Web server
* XmlRpc -- Make asynchronous remote procedure calls over HTTP
* CorbaImplementation -- CORBA Dynamic Invocation interface using protocol IIOP
* SoapClient -- Access to SOAP web-services
* UrlPackage -- Parse and handle URLs
* [http://github.com/leathekd/grapnel grapnel] -- HTTP request library built on ##curl## with callback dispatch

== Web APIs ==

* [https://github.com/sigma/gh.el gh.el] -- <nowiki>GitHub</nowiki> API library making use of EIEIO
* [https://github.com/rsanders/github-api-v3.el github-api-v3.el] -- Library for the v3 <nowiki>GitHub</nowiki> API

== Filesystem ==

* SubdirsToList -- Recursively add subdirectories to a list

== Persistence ==

* See CategoryData

== Security ==

* PasswordGenerator -- Generate password strings
* OAuthLibrary -- OAuth authentication
* HmacShaOne -- Generate HMAC-SHA1 authentication signatures from strings

== Project Management ==

* ProjectBufferMode -- Generic mode to handle projects

== Testing ==

* See UnitTesting

== Miscellaneous ==

* [[uuid]] -- Globally unique identifiers

== See Also ==

* CategoryProgrammerUtils
* CategoryCode
